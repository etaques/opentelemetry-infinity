name: otel-main

on:
  workflow_dispatch:

  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:

  pre-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Generate ref tag (latest)
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV

      - name: get otelcol-contrib
        run: make getotelcol

      - name: Build binnary (go build only)
        run: make build

      - name: Get VERSION
        shell: bash
        run: |
          version=$(runner/otelcol-contrib -v | cut -d ' ' -f 3)
          echo $version > VERSION.txt

      - name: Store VERSION
        uses: actions/upload-artifact@v3
        with:
          name: VERSION
          path: VERSION.txt
          retention-days: 1
          
  package:
    if: ${{ github.event_name != 'pull_request' }} 
    needs: [ pre-build ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Generate ref tag (latest)
        run: |
          echo "REF_TAG=latest" >> $GITHUB_ENV

      - name: Download VERSION
        uses: actions/download-artifact@v3
        with:
          name: VERSION
      
      - name: Get VERSION
        shell: bash
        run: |
          echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV

      - name: Debug version
        run: echo ${{ env.VERSION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}        

      - name: Build otel infinity service
        shell: bash
        run: |
           make container

      - name: Push otel infinity container
        run: |
          docker push -a ghcr.io/leoparente/opentelemetry-infinity
          
  release:
    needs:
      - package
    runs-on: ubuntu-latest
    # if this is a push into one of our main branches (rather than just a pull request), we will also package
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set variables
        run: |
          echo "LAST_TAG=`git tag --sort=committerdate | tail -1`" >> $GITHUB_ENV
          echo "TAG=v`cat ${{github.workspace}}/VERSION`" >> $GITHUB_ENV
          echo "VERSION=`cat ${{github.workspace}}/VERSION`" >> $GITHUB_ENV
        
      - name: Generate release changelog
        run: |
          echo "# What's new" > changelog.md
          git log ${{ env.LAST_TAG }}..HEAD --pretty=format:"$ad- %s [%an]" >> changelog.md
          sed -i -e "s/- /â€¢ /g" changelog.md

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.VERSION }}
          body_path: ./changelog.md
          draft: false
          prerelease: false
